"
" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

Plug 'lifepillar/vim-gruvbox8'
let g:gruvbox_transp_bg = 1
let g:gruvbox_plugin_hi_groups = 1
let g:gruvbox_filetype_hi_groups = 1

" Make pairs colorful
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle"

let g:polyglot_disabled = ['markdown', 'mathematica']
Plug 'sheerun/vim-polyglot'

if has('python3') 
    Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
    let g:Lf_ShortcutF = '<C-P>'
    let g:Lf_DefaultMode = 'NameOnly'
    let g:Lf_PreviewCode = 1
    let g:Lf_ShowHidden = 1
    let g:Lf_ShortcutB = '<Leader>bo'
    let g:Lf_DefaultExternalTool = "rg"
    let g:Lf_RootMarkers = ['.xcworkspace', '.project', '.git']
    let g:Lf_WindowPosition = 'bottom'
    let g:Lf_PreviewInPopup = 1
    let g:Lf_PopupColorscheme = 'gruvbox_default'
    let g:Lf_StlColorscheme = 'gruvbox_material'
    let g:Lf_ShowDevIcons = 0

    " let g:Lf_UseVersionControlTool = "git ls-files"
    let g:Lf_CommandMap = {'<C-C>': ['<Esc>', '<C-C>'],
                \ '<C-J>': ['<C-N>', '<C-J>'],
                \ '<C-K>': ['<C-P>', '<C-K>'],
                \ '<C-]>': ['<C-V>'],
                \ '<C-X>': ['<C-S>'],
                \ '<C-P>': ['<C-O>'],
                \}
    let g:Lf_WindowHeight = 0.3
    let g:Lf_WildIgnore = {
                \ 'dir': ['.svn','.git','.hg'],
                \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
                \}
    let g:Lf_StlSeparator = { 'left': '', 'right': '' }

    let g:Lf_ReverseOrder = 1
else
    Plug 'ctrlpvim/ctrlp.vim'
endif

" Global search
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
let g:grepper = {
            \ 'tools': ['rg', 'ag', 'ack', 'grep', 'findstr', 'pt', 'git'],
            \ 'rg': { 
            \         'grepprg':    "rg -H --no-heading --ignore-case -g '!*build*' --vimgrep" . (has('win32') ? ' $* .' : ''),
            \         'grepformat': '%f:%l:%c:%m',
            \         'escape':     '\^$.*+?()[]{}|' },
            \ 'pt': { 'grepprg':    'pt --nocolor --nogroup',
            \         'grepformat': '%f:%l:%m',
            \         'escape':     '\+*^$()[]', }
            \ }
" \         'grepprg':    "rg -H --no-heading --ignore-case --no-ignore -g '!*build*' --vimgrep" . (has('win32') ? ' $* .' : ''),
let g:grepper.highlight = 1
nnoremap <leader>f :Grepper<cr>
if executable('rg') 
    vnoremap <silent> <leader>f :call visual#action("GrepperRg 'foo'")<cr>
elseif executable('ag')
    vnoremap <silent> <leader>f :call visual#action("GrepperAg 'foo'")<cr>
endif

Plug 'mattn/emmet-vim'
let g:user_emmet_expandabbr_key = '<C-y><tab>'
let g:user_emmet_prev_key = '<C-y>p'

Plug 'skywind3000/vim-terminal-help'
let g:terminal_auto_insert = 1
let g:terminal_key = "<F5>"
let g:terminal_cwd = 2
let g:terminal_height = 20
let g:terminal_list = 0
let g:terminal_kill = "term"

"""""""""""""""""""statusline""""""""""""""""""""
Plug 'itchyny/lightline.vim'
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'absolutepath', 'modified' ] ],
      \ }
      \ }

let g:lightline.colorscheme = 'gruvbox8'
"""""""""""""""""""""""""""""""""""""""

" File tree
Plug 'lambdalisue/fern.vim'
let g:fern#disable_default_mappings = 1

Plug 'lambdalisue/nerdfont.vim' " icones
Plug 'lambdalisue/fern-renderer-nerdfont.vim' " icones
let g:fern#renderer = "nerdfont"

noremap <silent> <F1> :Fern . -drawer -reveal=% -toggle -width=35<CR><C-w>=
noremap <silent> <Leader>j :Fern . -drawer -reveal=% -width=35<CR><C-w>=
function! FernInit() abort
    autocmd filetype fern setlocal nonumber
    nmap <buffer><expr>
                \ <Plug>(fern-my-open-expand-collapse)
                \ fern#smart#leaf(
                \   "\<Plug>(fern-action-open:select)",
                \   "\<Plug>(fern-action-expand)",
                \   "\<Plug>(fern-action-collapse)",
                \ )
    nmap <buffer> o <Plug>(fern-my-open-expand-collapse)
    nmap <buffer> <CR> <Plug>(fern-action-open:select)
    nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
    nmap <buffer> n <Plug>(fern-action-new-path)
    nmap <buffer> d <Plug>(fern-action-remove)
    nmap <buffer> m <Plug>(fern-action-move)
    nmap <buffer> M <Plug>(fern-action-rename)
    nmap <buffer> h <Plug>(fern-action-hidden-toggle)j
    nmap <buffer> r <Plug>(fern-action-reload)
    " nmap <buffer> k <Plug>(fern-action-mark-toggle)j
    nmap <buffer> s <Plug>(fern-action-open:split)
    nmap <buffer> v <Plug>(fern-action-open:vsplit)
    nmap <buffer><nowait> < <Plug>(fern-action-leave)
    nmap <buffer><nowait> > <Plug>(fern-action-enter)
endfunction

augroup FernGroup
    autocmd!
    autocmd FileType fern call FernInit()
augroup END

function! s:hijack_directory() abort
    let path = expand('%:p')
    if !isdirectory(path)
        return
    endif
    bwipeout %
    execute printf('Fern %s', fnameescape(path))
endfunction

augroup my-fern-hijack
    autocmd!
    autocmd BufEnter * ++nested call s:hijack_directory()
augroup END

" Config netrw
let g:loaded_netrw  = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_netrwFileHandlers = 1

Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
map <silent> <F2> :TagbarToggle<cr>
imap <silent> <F2> <Esc>:TagbarToggle<cr>

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

" Add commenter
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1
map <leader>/ <leader>c<space>

" Code snip support
" Plug 'SirVer/ultisnips', {'on': []}
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-n>"
" let g:UltiSnipsJumpBackwardTrigger="<c-p>"

Plug 'PangPangPangPangPang/vim-snippets', {'on': []}
""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""git""""""""""""""""""""
Plug 'tpope/vim-fugitive' 
map <leader>ga :Gwrite<cr>
map <silent> <leader>gb :Gblame<cr>
""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""Syntastic""""""""""""""
if v:version > 743 || has('nvim')
    let g:ale_disable_lsp = 1
    Plug 'w0rp/ale'
    let g:ale_lint_on_text_changed = 'normal'
    let g:ale_lint_on_insert_leave = 1
    let g:ale_linters_explicit = 1
    let g:ale_completion_delay = 500
    let g:ale_lint_delay = 100
    let g:ale_fix_on_save = 1
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 0

    if has('nvim') 
        let g:ale_virtualtext_cursor = 1
        let g:ale_echo_cursor = 0
    else
        let g:ale_echo_cursor = 1
    endif
    let g:ale_virtualtext_prefix = '■ '
    " let g:ale_lint_on_enter = 0

    let g:ale_c_ccls_executable = 'ccls'

    let g:ale_sign_warning = ' '
    let g:ale_sign_error = ' '
    let g:ale_statusline_format = ['x %d', '> %d', '⬥ ok']
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_sign_highlight_linenrs = 1
    " highlight clear ALEErrorSign
    " highlight clear ALEWarningSign
    "
    let g:ale_javascript_eslint_executable = '/usr/local/bin/eslint'
    let g:ale_javascript_eslint_use_global = 1
    let g:ale_linters = {'jsx': ['stylelint', 'eslint'],
                \        'javascript' : ['eslint'],
                \        'typescript' : ['eslint'],
                \        'typescriptreact' : ['eslint'],
                \        'html' : ['htmlhint'],
                \        'css' : ['stylelint'],
                \        'python' : ['flake8'],
                \        'go' : ['golint'],
                \        'cfamily' : ['ccls'],
                \        'dart' : ['dartanalyzer'],
                \       }
    let g:ale_linter_aliases = {
                \   'cfamily': ['c', 'cpp', 'objc', 'objcpp'],
                \   'xml': 'html',
                \   'ttss': 'css',
                \   'Dockerfile': 'dockerfile',
                \   'csh': 'sh',
                \   'javascriptreact': ['javascript', 'jsx'],
                \   'plaintex': 'tex',
                \   'ps1': 'powershell',
                \   'rmarkdown': 'r',
                \   'rmd': 'r',
                \   'systemverilog': 'verilog',
                \   'typescriptreact': ['typescript', 'tsx'],
                \   'verilog_systemverilog': ['verilog_systemverilog', 'verilog'],
                \   'vimwiki': 'markdown',
                \   'vue': ['vue', 'javascript'],
                \   'xsd': ['xsd', 'xml'],
                \   'xslt': ['xslt', 'xml'],
                \   'zsh': 'sh',
                \              }
    let g:ale_fixers = {
                \       'javascript': ['eslint'],
                \       'typescript' : ['eslint'],
                \       'typescriptreact' : ['eslint'],
                \       'dart': ['dartfmt'],
                \       'go': ['gofmt', 'goimports'],
                \        'html' : ['htmlhint'],
                \        'css' : ['stylelint'],
                \       '*': ['remove_trailing_lines', 'trim_whitespace'],
                \      }
    let g:ale_fix_on_save_ignore = {
                \      'vim': ['remove_trailing_lines', 'trim_whitespace'],
                \      }
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

    map <silent> <leader>s :ALEToggle<cr>
endif
"""""""""""""""""""""""""""""""""""""""""""


""""""""""""""Lazyload func""""""""""""""""
" augroup plug_lazy_load
" autocmd!
" autocmd InsertEnter * call plug#load('ultisnips','vim-snippets')
" \| autocmd! plug_lazy_load
" augroup END
"""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""Golang""""""""""""""""""""
" Call :GoUpdateBinaries to update.
" Plug 'fatih/vim-go'
"""""""""""""""""""""""""""""""""""""""""""

" Initialize plugin system
Plug 'PangPangPangPangPang/visual-selection-vim'
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call visual#action('')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call visual#action('')<CR>?<C-R>=@/<CR><CR>
" vnoremap <silent> <leader>f :call visual#action('Ack! foo')<CR>
" nnoremap <leader>f :Ack! 
vnoremap <leader>r :call visual#replace('%s/foo//g')<CR><left><left>

"Quick open doc
if has('mac')
    Plug 'rizzatti/dash.vim', {'on':[
                \  'Dash',
                \  'Dash!'
                \]}
    nnoremap <silent> <leader>z :Dash<cr>
else
    Plug 'KabbAmine/zeavim.vim', {'on': [
                \	'Zeavim', 'Docset',
                \	'<Plug>Zeavim',
                \	'<Plug>ZVVisSelection',
                \	'<Plug>ZVKeyDocset',
                \	'<Plug>ZVMotion'
                \ ]}
    nnoremap <silent> <leader>z :Zeavim<cr>

    Plug 'puremourning/vimspector'
    let g:vimspector_enable_mappings = 'HUMAN'
endif
"""""""""""""""""""""""""""""""""""""""""""
"
if 0
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    let g:coc_global_extensions = [
                \'coc-python',
                \'coc-sh',
                \'coc-imselect',
                \'coc-json',
                \'coc-tsserver',
                \'coc-html',
                \'coc-css',
                \'coc-snippets',
                \'coc-vimlsp',
                \'coc-prettier',
                \'coc-translator',
                \'coc-flutter-tools',
                \'coc-sourcekit',
                \'coc-postfix',
                \'coc-fzf-preview',
                \]

    nmap <silent> <c-]> <Plug>(coc-definition)

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    let g:coc_snippet_next = '<TAB>'
    let g:coc_snippet_prev = '<S-TAB>'

    if exists('*complete_info')
        inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
        inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif

    " Use K for show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>
    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction

    " Use `:Fold` for fold current buffer
    command! -nargs=? Fold :call CocAction('fold', <f-args>)

    map <silent> <leader>t :CocCommand translator.popup<CR>


    augroup Coc
        autocmd!
        " Setup formatexpr specified filetype(s).
        " autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
        " Update signature help on jump placeholder
        autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Normal Menu config
    function s:open_coc_menu() abort
        let content = [
                    \ ["Find &Type Definition", "call CocActionAsync('jumpDefinition')" ],
                    \ ["Find &Implementation", "call CocActionAsync('jumpImplementation')" ],
                    \ ["Find &References", "call CocActionAsync('jumpReferences')" ],
                    \ ['-'],
                    \ ["Prev Diagnostic &[", "call CocActionAsync('diagnosticPrevious')" ],
                    \ ["Next Diagnostic &]", "call CocActionAsync('diagnosticNext')" ],
                    \ ['-'],
                    \ ["Re&name", "call CocActionAsync('rename')"],
                    \ ["&Format Code", "call CocActionAsync('format')" ],
                    \ ["Fi&x Code", "call CocActionAsync('doQuickfix')"],
                    \ ["&Code Aciton", "CocCommand actions.open" ],
                    \ ['-'],
                    \ ["Code &Prettier", "CocCommand prettier.formatFile" ],
                    \ ["Code &Prettier", "CocCommand prettier.formatFile" ],
                    \ ]
        " set cursor to the last position
        let opts = {'index':g:quickui#context#cursor}
        call quickui#context#open(content, opts)
    endfunction
    nmap <leader>c :call <SID>open_coc_menu()<CR>

    " Visual Menu config
    function s:open_coc_visual_menu() abort
        let content = [
                    \ ["&Format Code", "call CocActionAsync('formatSelected', visualmode())" ],
                    \ ["Fi&x Code", "call CocActionAsync('doQuickfix')"],
                    \ ['-'],
                    \ ["&Code Aciton", "CocCommand actions.open" ],
                    \ ['-'],
                    \ ["Code &Prettier", "CocCommand prettier.formatFile" ],
                    \ ]
        " set cursor to the last position
        let opts = {'index':g:quickui#context#cursor}
        call quickui#context#open(content, opts)
    endfunction
    vmap <leader>c :call <SID>open_coc_visual_menu()<CR>

    " For flutter
    function s:open_coc_flutter_menu() abort
        let content = [
                    \ ["&Attach", "CocCommand flutter.attach" ],
                    \ ["Attach &Simple", "CocCommand flutter.attach --dart-define=runInFlutter=true"],
                    \ ["&Quit Debug", "CocCommand flutter.dev.quit" ],
                    \ ['-'],
                    \ ["Hot &Reload", "CocCommand flutter.dev.hotReload"],
                    \ ["&Hot Restart", "CocCommand flutter.dev.hotRestart"],
                    \ ['-'],
                    \ ["Open Dev&Log", "CocCommand flutter.dev.openDevLog"],
                    \ ["Open &Profiler", "CocCommand flutter.dev.openProfiler"],
                    \ ["Toggle &Outline", "CocCommand flutter.toggleOutline"],
                    \ ['-'],
                    \ ["&Find all", "Grepper"],
                    \ ]
        " set cursor to the last position
        let opts = {'index':g:quickui#context#cursor}
        call quickui#context#open(content, opts)
    endfunction

    augroup Flutter
        autocmd FileType dart nnoremap <silent> <leader>f :call <SID>open_coc_flutter_menu()<CR>
    augroup end
else
    """""""""""Complete & Syntastic"""""""""""""""""
    Plug 'Valloric/YouCompleteMe'
    " if g:python_version >= 3
    " let g:ycm_python_binary_path = g:python3_host_prog
    " else
    " let g:ycm_python_binary_path = g:python_host_prog
    " endif
    let g:ycm_global_ycm_extra_conf = $YCM_WINDIR . "\\.ycm_extra_conf.py"
    " add_preview
    let g:ycm_add_preview_to_completeopt                = 'popup'
    let g:ycm_autoclose_preview_window_after_completion = 1
    let g:ycm_autoclose_preview_window_after_insertion  = 1
    let g:ycm_key_list_select_completion                = ['<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion              = ['<C-p>', '<Up>']
    let g:ycm_key_invoke_completion                     = 'Enter'
    " let g:ycm_confirm_extra_conf                        = 1 " 加载.ycm_extra_conf.py提示
    let g:ycm_collect_identifiers_from_tags_files       = 1 " 开启 YC基于标签引擎
    let g:ycm_min_num_of_chars_for_completion           = 2 " 从第2个键入字符就开始罗列匹配项
    let g:ycm_seed_identifiers_with_syntax              = 0 " 语法关键字补全
    let g:ycm_complete_in_comments                      = 0
    let g:ycm_complete_in_strings                       = 1
    let g:ycm_show_diagnostics_ui                       = 1
    let g:ycm_collect_identifiers_from_tags_files       = 1
    if has('patch-8.1.1875')
        let g:ycm_disable_signature_help = 0
    else
        let g:ycm_disable_signature_help = 1
    endif
    let g:ycm_semantic_triggers =  {
                \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
                \ 'cs,lua,javascript': ['re!\w{2}'],
                \ 'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s', 're!\[.*\]\s'],
                \ 'ocaml' : ['.', '#'],
                \ 'objcpp' : ['->', '.', '::'],
                \ 'perl' : ['->'],
                \ 'php' : ['->', '::'],
                \ 'typescript,d,perl6,scala,vb,elixir' : ['.'],
                \ 'ruby' : ['.', '::'],
                \ }
    let g:ycm_filetype_blacklist = {
                \ 'coc-explorer' : 1,
                \ 'tagbar'       : 1,
                \ 'vista'        : 1,
                \ 'leaderf'      : 1,
                \ 'fzf'          : 1,
                \ 'gitcommit'    : 1,
                \ }
    " hover


    nnoremap <silent> <c-]> a<ESC>:YcmCompleter GoToDefinitionElseDeclaration<CR>
    nnoremap <silent> <leader>cx a<ESC>:YcmCompleter FixIt<CR>
    nmap K :YcmDiags<CR>
endif
" Initialize plugin system
call plug#end()

silent! colorscheme gruvbox8
