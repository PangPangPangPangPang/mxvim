"
" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

Plug 'sainnhe/gruvbox-material'
let g:gruvbox_material_palette = 'original'
let g:gruvbox_material_background = 'soft'
let g:gruvbox_material_enable_bold = 1
let g:gruvbox_material_visual = 'reverse'
let g:gruvbox_material_italicize_strings = 1
let g:gruvbox_material_lightline_disable_bold = 0
let g:gruvbox_material_disable_italic_comment = 0

" Plug 'lifepillar/vim-gruvbox8'

" Make pairs colorful
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle"

let g:polyglot_disabled = ['markdown', 'mathematica']
Plug 'sheerun/vim-polyglot'

Plug 'ctrlpvim/ctrlp.vim'

" Search
Plug 'mileszs/ack.vim' 
let g:ack_use_cword_for_empty_search = 1
if executable('ag')
  " let g:ackprg = 'ag --vimgrep'
endif
vnoremap <silent> <leader>f :call visual#action('Ack! foo')<cr>
nnoremap <leader>f :Ack!<space>

" Plug 'PangPangPangPangPang/vim-terminal', { 'branch' : 'dev' }
" map <silent> <F12> :VSTerminalToggle<cr>
" tmap <silent> <F12> <c-w>:VSTerminalToggle<cr>
" let g:vs_terminal_custom_height = 10

"""""""""""""""""""statusline""""""""""""""""""""
Plug 'itchyny/lightline.vim'
let g:lightline = {
            \ 'active':{},
            \ 'inactive':{},
            \ }
let g:lightline.colorscheme = 'gruvbox_material'
"""""""""""""""""""""""""""""""""""""""

Plug 'lambdalisue/fern.vim'
let g:fern#disable_default_mappings = 1

Plug 'lambdalisue/nerdfont.vim' " icones
Plug 'lambdalisue/fern-renderer-nerdfont.vim' " icones
let g:fern#renderer = "nerdfont"

noremap <silent> <F1> :Fern . -drawer -reveal=% -toggle -width=35<CR><C-w>=
noremap <silent> <Leader>j :Fern . -drawer -reveal=% -width=35<CR><C-w>=
function! FernInit() abort
  nmap <buffer><expr>
        \ <Plug>(fern-my-open-expand-collapse)
        \ fern#smart#leaf(
        \   "\<Plug>(fern-action-open:select)",
        \   "\<Plug>(fern-action-expand)",
        \   "\<Plug>(fern-action-collapse)",
        \ )
  nmap <buffer> o <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> <CR> <Plug>(fern-action-open:select)
  nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
  nmap <buffer> n <Plug>(fern-action-new-path)
  nmap <buffer> d <Plug>(fern-action-remove)
  nmap <buffer> m <Plug>(fern-action-move)
  nmap <buffer> M <Plug>(fern-action-rename)
  nmap <buffer> h <Plug>(fern-action-hidden-toggle)j
  nmap <buffer> r <Plug>(fern-action-reload)
  " nmap <buffer> k <Plug>(fern-action-mark-toggle)j
  nmap <buffer> s <Plug>(fern-action-open:split)
  nmap <buffer> v <Plug>(fern-action-open:vsplit)
  nmap <buffer><nowait> < <Plug>(fern-action-leave)
  nmap <buffer><nowait> > <Plug>(fern-action-enter)
endfunction

augroup FernGroup
  autocmd!
  autocmd FileType fern call FernInit()
augroup END

function! s:hijack_directory() abort
  let path = expand('%:p')
  if !isdirectory(path)
    return
  endif
  bwipeout %
  execute printf('Fern %s', fnameescape(path))
endfunction

augroup my-fern-hijack
  autocmd!
  autocmd BufEnter * ++nested call s:hijack_directory()
augroup END

" Config netrw
let g:loaded_netrw  = 1
let g:loaded_netrwPlugin = 1
let g:loaded_netrwSettings = 1
let g:loaded_netrwFileHandlers = 1

Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
map <silent> <F2> :TagbarToggle<cr>
imap <silent> <F2> <Esc>:TagbarToggle<cr>

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

" Add commenter
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1
map <leader>/ <leader>c<space>

" Code snip support
" Plug 'SirVer/ultisnips', {'on': []}
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-n>"
" let g:UltiSnipsJumpBackwardTrigger="<c-p>"

Plug 'PangPangPangPangPang/vim-snippets', {'on': []}
""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""git""""""""""""""""""""
Plug 'tpope/vim-fugitive' 
map <leader>ga :Gwrite<cr>
map <silent> <leader>gb :Gblame<cr>
""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""Syntastic""""""""""""""
if v:version > 743 || has('nvim')
    Plug 'w0rp/ale'
    " Set ale disable as default
    let g:ale_enabled = 1
    let g:ale_lint_on_text_changed = 'normal'
    let g:ale_lint_on_insert_leave = 1
    " let g:ale_lint_on_enter = 0

    let g:ale_sign_error = '✖'
    let g:ale_sign_warning = '◎'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
    " let g:ale_sign_column_always = 1
    "
    let g:ale_linters = {'jsx': ['stylelint', 'eslint'],
                \'python' : ['flake8']
                \ }
    let g:ale_linter_aliases = {'jsx': 'css'}
    map <silent> <leader>s :ALEToggle<cr>
endif
"""""""""""""""""""""""""""""""""""""""""""

"""""""""""Complete & Syntastic"""""""""""""""""
" Plug 'Valloric/YouCompleteMe'
" " if g:python_version >= 3
"     " let g:ycm_python_binary_path = g:python3_host_prog
" " else
"     " let g:ycm_python_binary_path = g:python_host_prog
" " endif
" let g:ycm_global_ycm_extra_conf = $YCM_WINDIR . "\\.ycm_extra_conf.py"
" " add_preview
" let g:ycm_add_preview_to_completeopt                = 0
" let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_autoclose_preview_window_after_insertion  = 1
" let g:ycm_key_list_select_completion                = ['<C-n>', '<Down>']
" let g:ycm_key_list_previous_completion              = ['<C-p>', '<Up>']
" " let g:ycm_confirm_extra_conf                        = 1 " 加载.ycm_extra_conf.py提示
" let g:ycm_collect_identifiers_from_tags_files       = 1 " 开启 YC基于标签引擎
" let g:ycm_min_num_of_chars_for_completion           = 2 " 从第2个键入字符就开始罗列匹配项
" let g:ycm_seed_identifiers_with_syntax              = 0 " 语法关键字补全
" let g:ycm_complete_in_comments                      = 0
" let g:ycm_complete_in_strings                       = 1
" let g:ycm_show_diagnostics_ui                       = 0
" let g:ycm_collect_identifiers_from_tags_files       = 1
" if has('patch-8.1.1875')
"     let g:ycm_disable_signature_help = 0
" else
"     let g:ycm_disable_signature_help = 1
" endif
" let g:ycm_semantic_triggers =  {
"             \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
"             \ 'cs,lua,javascript': ['re!\w{2}'],
"             \ 'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s', 're!\[.*\]\s'],
"             \ 'ocaml' : ['.', '#'],
"             \ 'objcpp' : ['->', '.', '::'],
"             \ 'perl' : ['->'],
"             \ 'php' : ['->', '::'],
"             \ 'typescript,d,perl6,scala,vb,elixir' : ['.'],
"             \ 'ruby' : ['.', '::'],
"             \ }
" let g:ycm_filetype_blacklist = {
"             \ 'coc-explorer' : 1,
"             \ 'tagbar'       : 1,
"             \ 'vista'        : 1,
"             \ 'leaderf'      : 1,
"             \ 'fzf'          : 1,
"             \ 'gitcommit'    : 1,
"             \ }
" " hover
" 
" 
" nnoremap <silent> <c-]> a<ESC>:YcmCompleter GoToDefinitionElseDeclaration<CR>
" nmap K :YcmDiags<CR>

""""""""""""""Lazyload func""""""""""""""""
augroup plug_lazy_load
    autocmd!
    autocmd InsertEnter * call plug#load('ultisnips','vim-snippets')
                \| autocmd! plug_lazy_load
augroup END
"""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""Golang""""""""""""""""""""
" Call :GoUpdateBinaries to update.
" Plug 'fatih/vim-go'
"""""""""""""""""""""""""""""""""""""""""""

" Initialize plugin system
Plug 'PangPangPangPangPang/visual-selection-vim'
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call visual#action('')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call visual#action('')<CR>?<C-R>=@/<CR><CR>
vnoremap <silent> <leader>f :call visual#action('Ack! foo')<CR>
nnoremap <leader>f :Ack! 
vnoremap <leader>r :call visual#replace('%s/foo//g')<CR><left><left>

"Quick open doc
if has('mac')
    Plug 'rizzatti/dash.vim', {'on':[
                \  'Dash',
                \  'Dash!'
                \]}
    nnoremap <silent> <leader>z :Dash<cr>
else
    Plug 'KabbAmine/zeavim.vim', {'on': [
                \	'Zeavim', 'Docset',
                \	'<Plug>Zeavim',
                \	'<Plug>ZVVisSelection',
                \	'<Plug>ZVKeyDocset',
                \	'<Plug>ZVMotion'
                \ ]}
    nnoremap <silent> <leader>z :Zeavim<cr>

Plug 'puremourning/vimspector'
let g:vimspector_enable_mappings = 'HUMAN'
endif
"""""""""""""""""""""""""""""""""""""""""""
"
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
      \'coc-python',
      \'coc-sh',
      \'coc-imselect',
      \'coc-json',
      \'coc-tsserver',
      \'coc-html',
      \'coc-css',
      \'coc-snippets',
      \'coc-vimlsp',
      \'coc-prettier',
      \'coc-translator',
      \'coc-flutter-tools',
      \'coc-sourcekit',
      \'coc-postfix',
      \'coc-fzf-preview',
      \]

nmap <silent> <c-]> <Plug>(coc-definition)

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

map <silent> <leader>t :CocCommand translator.popup<CR>


augroup Coc
  autocmd!
  " Setup formatexpr specified filetype(s).
  " autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Normal Menu config
function s:open_coc_menu() abort
  let content = [
        \ ["Find &Type Definition", "call CocActionAsync('jumpDefinition')" ],
        \ ["Find &Implementation", "call CocActionAsync('jumpImplementation')" ],
        \ ["Find &References", "call CocActionAsync('jumpReferences')" ],
        \ ['-'],
        \ ["Prev Diagnostic &[", "call CocActionAsync('diagnosticPrevious')" ],
        \ ["Next Diagnostic &]", "call CocActionAsync('diagnosticNext')" ],
        \ ['-'],
        \ ["Re&name", "call CocActionAsync('rename')"],
        \ ["&Format Code", "call CocActionAsync('format')" ],
        \ ["Fi&x Code", "call CocActionAsync('doQuickfix')"],
        \ ["&Code Aciton", "CocCommand actions.open" ],
        \ ['-'],
        \ ["Code &Prettier", "CocCommand prettier.formatFile" ],
        \ ["Code &Prettier", "CocCommand prettier.formatFile" ],
        \ ]
  " set cursor to the last position
  let opts = {'index':g:quickui#context#cursor}
  call quickui#context#open(content, opts)
endfunction
nmap <leader>c :call <SID>open_coc_menu()<CR>

" Visual Menu config
function s:open_coc_visual_menu() abort
  let content = [
        \ ["&Format Code", "call CocActionAsync('formatSelected', visualmode())" ],
        \ ["Fi&x Code", "call CocActionAsync('doQuickfix')"],
        \ ['-'],
        \ ["&Code Aciton", "CocCommand actions.open" ],
        \ ['-'],
        \ ["Code &Prettier", "CocCommand prettier.formatFile" ],
        \ ]
  " set cursor to the last position
  let opts = {'index':g:quickui#context#cursor}
  call quickui#context#open(content, opts)
endfunction
vmap <leader>c :call <SID>open_coc_visual_menu()<CR>

" For flutter
function s:open_coc_flutter_menu() abort
  let content = [
        \ ["&Attach", "CocCommand flutter.attach" ],
        \ ["Attach &Simple", "CocCommand flutter.attach --dart-define=runInFlutter=true"],
        \ ["&Quit Debug", "CocCommand flutter.dev.quit" ],
        \ ['-'],
        \ ["Hot &Reload", "CocCommand flutter.dev.hotReload"],
        \ ["&Hot Restart", "CocCommand flutter.dev.hotRestart"],
        \ ['-'],
        \ ["Open Dev&Log", "CocCommand flutter.dev.openDevLog"],
        \ ["Open &Profiler", "CocCommand flutter.dev.openProfiler"],
        \ ["Toggle &Outline", "CocCommand flutter.toggleOutline"],
        \ ['-'],
        \ ["&Find all", "Grepper"],
        \ ]
  " set cursor to the last position
  let opts = {'index':g:quickui#context#cursor}
  call quickui#context#open(content, opts)
endfunction
vmap <leader>f :call <SID>open_coc_flutter_menu()<CR>

augroup Flutter
  autocmd FileType dart nnoremap <silent> <leader>f :call <SID>open_coc_flutter_menu()<CR>
augroup end
" Initialize plugin system
call plug#end()

