"
" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

Plug 'sainnhe/gruvbox-material'
Plug 'morhetz/gruvbox'

" Make pairs colorful
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle"

Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_ShortcutF = '<C-P>'
let g:Lf_ShortcutB = '<Leader>bo'
let g:Lf_DefaultExternalTool = "ag"
" let g:Lf_UseVersionControlTool = "git ls-files"
let g:Lf_CommandMap = {'<C-C>': ['<Esc>', '<C-C>']}
let g:Lf_WindowHeight = 0.3
let g:Lf_WildIgnore = {
            \ 'dir': ['.svn','.git','.hg'],
            \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
            \}
let g:Lf_StlSeparator = { 'left': '', 'right': '' }
let g:Lf_ReverseOrder = 1

" Search
Plug 'mileszs/ack.vim' 
let g:ack_use_cword_for_empty_search = 1
if executable('ag')
  " let g:ackprg = 'ag --vimgrep'
endif
vnoremap <silent> <leader>f :call visual#action('Ack! foo')<cr>
nnoremap <leader>f :Ack!<space>

Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'

" enable gtags module
let g:gutentags_modules = ['ctags', 'gtags_cscope']

" config project root markers.
let g:gutentags_project_root = ['.root']

" generate datebases in my cache directory, prevent gtags files polluting my project
let g:gutentags_cache_dir = expand('~/.cache/tags')

" change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1

Plug 'PangPangPangPangPang/vim-terminal', { 'branch' : 'dev' }
map <silent> <F12> :VSTerminalToggle<cr>
tmap <silent> <F12> <c-w>:VSTerminalToggle<cr>
let g:vs_terminal_custom_height = 10

"""""""""""""""""""statusline""""""""""""""""""""
Plug 'itchyny/lightline.vim'
let g:lightline = {
            \ 'colorscheme': 'gruvbox_material',
            \ 'mode_map': { 'c': 'NORMAL'  },
            \ 'active': {
            \   'left': [ [ 'mode', 'paste'  ], [ 'fugitive', 'filename'  ]  ],
            \   'right': [ [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ], [ 'lineinfo'  ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype'  ]  ]
            \ },
            \ 'inactive': {
            \   'left': [ [ 'filename' ]  ],
            \   'right': []
            \ },
            \ 'component_function': {
            \   'modified': 'LightlineModified',
            \   'readonly': 'LightlineReadonly',
            \   'fugitive': 'LightlineFugitive',
            \   'filename': 'LightlineFilename',
            \   'fileformat': 'LightlineFileformat',
            \   'filetype': 'LightlineFiletype',
            \   'fileencoding': 'LightlineFileencoding',
            \   'mode': 'LightlineMode',
            \ },
            \ 'separator': { 'left': '', 'right': '' },
            \ 'subseparator': { 'left': '', 'right': '' }
            \ }

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \}

let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \}

function! LightlineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '' : ''
endfunction

function! LightlineMode()
    let fname = expand('%:t')
    return fname == '__Tagbar__' ? 'Tagbar' :
                \ fname == 'ControlP' ? 'CtrlP' :
                \ fname =~ 'NERD_tree' ? 'NERDTree' :
                \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightlineFilename()
    let fname = expand('%:t')
    if fname == 'ControlP'
        return ''
    endif
    if fname =~ 'NERD_tree'
        return 'NERDTree'
    endif
    if fname =~ 'FZF'
        return 'FZF'
    endif
    if fname =~ '__Tagbar__'
        return 'Tagbar'
    endif

    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
                \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
                \  &ft == 'unite' ? unite#get_status_string() :
                \  &ft == 'vimshell' ? vimshell#get_status_string() :
                \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
                \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
        let branch = fugitive#head()
        return branch !=# '' ? ' '.branch : ''
    endif
    return ''
endfunction

function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction
"""""""""""""""""""""""""""""""""""""""

Plug 'scrooloose/nerdtree', {'on': ['NERDTreeToggle', 'NERDTreeFind']}
" Ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$'] 
Plug 'Xuyuanp/nerdtree-git-plugin', {'on': ['NERDTreeToggle', 'NERDTreeFind']}
let g:nerdtree_tabs_open_on_gui_startup = 0
map <silent> <F1> :NERDTreeToggle<cr>
imap <silent> <F1> <Esc>:NERDTreeToggle<cr>
map <silent> <leader>j :NERDTreeFind<cr>

" Config netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3 " tree view
let g:netrw_altv = 1 " open splits to the right
let g:netrw_list_hide = netrw_gitignore#Hide()
let g:netrw_list_hide = ',\(^\|\s\s\)\zs\.\S\+'

Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
map <silent> <F2> :TagbarToggle<cr>
imap <silent> <F2> <Esc>:TagbarToggle<cr>

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

" Add commenter
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1
map <leader>/ <leader>c<space>

" Code snip support
Plug 'SirVer/ultisnips', {'on': []}
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-p>"

Plug 'PangPangPangPangPang/vim-snippets', {'on': []}
""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""git""""""""""""""""""""
Plug 'tpope/vim-fugitive' 
map <leader>ga :Gwrite<cr>
map <silent> <leader>gb :Gblame<cr>
""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""Syntastic""""""""""""""
if v:version > 743 || has('nvim')
    Plug 'w0rp/ale'
    " Set ale disable as default
    let g:ale_enabled = 1
    let g:ale_lint_on_text_changed = 'normal'
    let g:ale_lint_on_insert_leave = 1
    " let g:ale_lint_on_enter = 0

    let g:ale_sign_error = '✖'
    let g:ale_sign_warning = '◎'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
    " let g:ale_sign_column_always = 1
    "
    let g:ale_linters = {'jsx': ['stylelint', 'eslint'],
                \'python' : ['flake8']
                \ }
    let g:ale_linter_aliases = {'jsx': 'css'}
    map <silent> <leader>s :ALEToggle<cr>

    Plug 'maximbaz/lightline-ale'
endif
"""""""""""""""""""""""""""""""""""""""""""

"""""""""""Complete & Syntastic"""""""""""""""""
Plug 'Valloric/YouCompleteMe'
if v:version > 743 || has('nvim')
    let g:ycm_register_as_syntastic_checker = 0 "default 1
    let g:ycm_enable_diagnostic_signs = 0
    let g:ycm_enable_diagnostic_highlighting = 0
else
    let g:ycm_register_as_syntastic_checker = 1 "default 1
    let g:ycm_enable_diagnostic_signs = 1
    let g:ycm_enable_diagnostic_highlighting = 1
    let g:ycm_error_symbol = '✖'
    let g:ycm_warning_symbol = '◎'
endif


let g:Show_diagnostics_ui = 1 "default 1
""will put icons in Vim's gutter on lines that have a diagnostic set.
"Turning this off will also turn off the YcmErrorLine and YcmWarningLine
""highlighting
let g:ycm_always_populate_location_list = 1 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1
let g:ycm_key_list_select_completion = ['<Enter>', '<Down>']

let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 0 "default 0
let g:ycm_path_to_python_interpreter = '' "default ''

" support css file auto complete
let g:ycm_semantic_triggers = {
            \   'css': [ 're!^\s{2}', 're!:\s+' ],
            \   'html': [ '</' ],
            \ }

let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
let g:ycm_server_log_level = 'info' "default info

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
let g:ycm_confirm_extra_conf = 1

let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab'  ]
let g:ycm_filetype_whitelist = { '*': 1  }
let g:ycm_key_invoke_completion = '<C-Space>'

nnoremap <silent> <c-]> a<ESC>:YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <F4> :YcmDiags<CR>
nnoremap <F11> :YcmForceCompileAndDiagnostics <CR>
""""""""""""""Lazyload func""""""""""""""""
augroup plug_lazy_load
    autocmd!
    autocmd InsertEnter * call plug#load('ultisnips','vim-snippets')
                \| autocmd! plug_lazy_load
augroup END
"""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""Golang""""""""""""""""""""
" Call :GoUpdateBinaries to update.
Plug 'fatih/vim-go'
"""""""""""""""""""""""""""""""""""""""""""

" Initialize plugin system
Plug 'PangPangPangPangPang/visual-selection-vim'
" Visual mode pressing * or # searches for the current selection
vnoremap <silent> * :<C-u>call visual#action('')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call visual#action('')<CR>?<C-R>=@/<CR><CR>
vnoremap <silent> <leader>f :call visual#action('Ack! foo')<CR>
nnoremap <leader>f :Ack! 
vnoremap <leader>r :call visual#replace('%s/foo//g')<CR><left><left>

"Quick open doc
if has('mac')
    Plug 'rizzatti/dash.vim', {'on':[
                \  'Dash',
                \  'Dash!'
                \]}
    nnoremap <silent> <leader>z :Dash<cr>
else
    Plug 'KabbAmine/zeavim.vim', {'on': [
                \	'Zeavim', 'Docset',
                \	'<Plug>Zeavim',
                \	'<Plug>ZVVisSelection',
                \	'<Plug>ZVKeyDocset',
                \	'<Plug>ZVMotion'
                \ ]}
    nnoremap <silent> <leader>z :Zeavim<cr>
endif
"""""""""""""""""""""""""""""""""""""""""""

" Initialize plugin system
call plug#end()

