"
" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/.vim/plugged')

" Search file
Plug 'kien/ctrlp.vim'
" This help vim remeber last choice, default choice is MRU.
let g:ctrlp_cmd = 'call CallCtrlP()'
func! CallCtrlP()
    if exists('s:called_ctrlp')
        CtrlPLastMode
    else
        let s:called_ctrlp = 1
        CtrlPMRU
    endif
endfunc

Plug 'vim-airline/vim-airline'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

Plug 'vim-airline/vim-airline-themes'
let g:airline_theme='molokai'

Plug 'Yggdroot/indentLine'

Plug 'scrooloose/nerdtree'
" Ignore files in NERDTree
let NERDTreeIgnore=['\.pyc$', '\~$'] 
map <F1> :NERDTreeToggle<cr>
imap <F1> <Esc>:NERDTreeToggle<cr>
map <leader>j :NERDTreeFind<cr>

Plug 'majutsushi/tagbar'
map <F2> :TagbarToggle<cr>
imap <F2> <Esc>:TagbarToggle<cr>

" Efficiency.
Plug 'easymotion/vim-easymotion'

Plug 'terryma/vim-multiple-cursors'
let g:multi_cursor_quit_key='<C-c>'
let g:multi_cursor_skip_key='<C-x>'

Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'

" Search
Plug 'mileszs/ack.vim' 

" Add commenter
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1
map <leader>/ <leader>c<space>

" Code snip support
" Plug 'SirVer/ultisnips'
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-n>"
" let g:UltiSnipsJumpBackwardTrigger="<c-p>"
" Plug 'honza/vim-snippets'
""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""git""""""""""""""""""""
Plug 'tpope/vim-fugitive' 
map <silent> <leader>gs :Gstatus<cr>
map <silent> <leader>gd :Gdiff<cr>
map <leader>ga :Gwrite<cr>
map <silent> <leader>gc :Gcommit<cr>
map <silent> <leader>gb :Gblame<cr>
""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""Syntastic""""""""""""""
if v:version > 743 || has('nvim')
    Plug 'w0rp/ale'
    let g:ale_lint_on_text_changed = 'normal'
    " let g:ale_lint_on_enter = 0

    let g:ale_sign_error = '✖'
    let g:ale_sign_warning = '◎'
    let g:airline_section_error = '%{ALEGetStatusLine()}'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    highlight clear ALEErrorSign
    highlight clear ALEWarningSign
    " let g:ale_sign_column_always = 1
    "
    let g:ale_linters = {'jsx': ['stylelint', 'eslint'],
                \'python' : ['flake8']
                \ }
    let g:ale_linter_aliases = {'jsx': 'css'}
    map <silent> <leader>s :ALEToggle<cr>
else
    Plug 'vim-syntastic/syntastic'
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

    " use eslint to check javascript syntastic
    " npm install eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint babel-eslint eslint_d -g
    let g:syntastic_javascript_checkers = ['eslint'] 
    let g:syntastic_javascript_eslint_exec = 'eslint_d' 

    " use pylint to check python syntastic
    " pip install pylint
    " if you use zsh and osx add `export LC_CTYPE=en_US.UTF-8` in your .zshrc
    let g:syntastic_python_checkers = ['pylint'] 
    let g:syntastic_python_python_exec = 'python2'
endif
"""""""""""""""""""""""""""""""""""""""""""

"""""""""""Complete & Syntastic"""""""""""""""""
Plug 'Valloric/YouCompleteMe'
let g:ycm_register_as_syntastic_checker = 1 "default 1
let g:Show_diagnostics_ui = 1 "default 1
""will put icons in Vim's gutter on lines that have a diagnostic set.
"Turning this off will also turn off the YcmErrorLine and YcmWarningLine
""highlighting
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 0
let g:ycm_always_populate_location_list = 1 "default 0
let g:ycm_open_loclist_on_ycm_diags = 1 "default 1
let g:ycm_key_list_select_completion = ['<Enter>', '<Down>']

let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 0 "default 0
let g:ycm_path_to_python_interpreter = '' "default ''

" support css file auto complete
let g:ycm_semantic_triggers = {
            \   'css': [ 're!^\s{2}', 're!:\s+' ],
            \   'html': [ '</' ],
            \ }

let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
let g:ycm_server_log_level = 'info' "default info

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  "where to search for .ycm_extra_conf.py if not found
let g:ycm_confirm_extra_conf = 1

let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab'  ]
let g:ycm_filetype_whitelist = { '*': 1  }
let g:ycm_key_invoke_completion = '<C-Space>'
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>*'

let  g:ycm_autoclose_preview_window_after_insertion = 1

nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <c-]> :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <F4> :YcmDiags<CR>
nnoremap <F11> :YcmForceCompileAndDiagnostics <CR>
"""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""FE""""""""""""""""""""
Plug 'pangloss/vim-javascript'
Plug 'othree/xml.vim'

"react support
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0
"""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""Swift"""""""""""""""""""
Plug 'keith/swift.vim'
"Swift highlight
set runtimepath+=~/.vim/plugged/swift.vim

"""""""""""""""""""""""""""""""""""""""""""
" Initialize plugin system
call plug#end()
